version: '3.8'

services:
  # AI Trading Backend
  ai-trading-backend:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
    container_name: ai-trading-backend
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=production
      - BACKEND_PORT=5001
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - LOG_LEVEL=info
      - LOG_DIR=/app/logs
      - METRICS_PORT=9090
      - PROMETHEUS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30000
      - CACHE_TTL=3600
      - API_RATE_LIMIT=100
      - ADMIN_API_KEY=${ADMIN_API_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - MODEL_VERSION_STRATEGY=ab_test
      - AB_TEST_TRAFFIC_SPLIT=50
      - MODEL_PERFORMANCE_THRESHOLD=0.85
      - MEMORY_LIMIT=2048
      - GC_INTERVAL=300000
      - CACHE_ENABLED=true
      - COMPRESSION_ENABLED=true
      - CORS_ORIGINS=${CORS_ORIGINS}
      - AVALANCHE_RPC_URL=${AVALANCHE_RPC_URL}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - TRADINGVIEW_API_KEY=${TRADINGVIEW_API_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./logs:/app/logs
      - ./models:/app/server/models
    depends_on:
      - redis
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-trading-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-trading-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-trading-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ai-trading-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - ai-trading-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ai-trading-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - ai-trading-backend
    networks:
      - ai-trading-network

  # Log Aggregation (ELK Stack - Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: ai-trading-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - ai-trading-network
    profiles:
      - monitoring

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: ai-trading-logstash
    restart: unless-stopped
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logs:/var/log/ai-trading
    depends_on:
      - elasticsearch
    networks:
      - ai-trading-network
    profiles:
      - monitoring

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: ai-trading-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - ai-trading-network
    profiles:
      - monitoring

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local

networks:
  ai-trading-network:
    driver: bridge






