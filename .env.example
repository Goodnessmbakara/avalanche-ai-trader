# =============================================================================
# AVALANCHE AI TRADER - ENVIRONMENT CONFIGURATION
# =============================================================================
# This file contains all environment variables required for the Avalanche AI Trader
# project. Copy this file to .env and configure the values for your environment.
# 
# SECURITY WARNING: Never commit this file to version control!
# The server/config/environment.ts file provides encryption for sensitive API keys.

# =============================================================================
# NODE ENVIRONMENT & BASIC CONFIGURATION
# =============================================================================
NODE_ENV=development
BACKEND_PORT=5001
ENABLE_STREAMING=true

# =============================================================================
# BLOCKCHAIN CONFIGURATION
# =============================================================================
# Avalanche Mainnet RPC URL (for production and mainnet deployment)
AVALANCHE_RPC_URL=https://api.avax.network/ext/bc/C/rpc

# Fuji Testnet RPC URL (for development and testing)
FUJI_RPC_URL=https://api.avax-test.network/ext/bc/C/rpc

# Private key for contract deployment and transactions
# WARNING: Use a dedicated deployment wallet, never use your main wallet!
# For production, consider using encrypted keys or hardware wallets
PRIVATE_KEY=your_deployment_private_key_here

# Gas limit for transactions (default: 300,000)
GAS_LIMIT=300000

# Fork block number for local testing (optional)
# FORK_BLOCK_NUMBER=12345678

# =============================================================================
# CONTRACT ADDRESSES (Frontend - Vite Environment Variables)
# =============================================================================
# Network selection: 'fuji' for testnet, 'avalanche' for mainnet
VITE_NETWORK=fuji

# Deployed contract addresses (update after deployment)
VITE_AI_POWERED_TRADER_ADDRESS=
VITE_PRICE_ORACLE_ADDRESS=

# USDT token address for Fuji testnet (required for trading)
VITE_USDT_ADDRESS_FUJI=0x0000000000000000000000000000000000000000

# =============================================================================
# STREAMING & REAL-TIME DATA CONFIGURATION (Frontend)
# =============================================================================
# Binance WebSocket URL for AVAX/USDT price streaming
VITE_BINANCE_WS_URL=wss://stream.binance.com:9443/ws/avaxusdt@trade

# Pangolin DEX subgraph WebSocket endpoint
VITE_PANGOLIN_SUBGRAPH_WS=wss://api.thegraph.com/subgraphs/name/pangolin-exchange/pangolin-v2

# Pangolin DEX subgraph HTTP endpoint (proxied through Vite)
VITE_PANGOLIN_SUBGRAPH_HTTP=/api/graph

# Pangolin AVAX/USDT pair ID (default: mainnet pair)
VITE_PANGOLIN_PAIR_ID=0x8f47416cae600bccf9114c3f1c9b24d7ee41ac0b

# Streaming configuration
VITE_STREAMING_RECONNECT_DELAY=5000
VITE_STREAMING_DATA_BUFFER_SIZE=1000

# =============================================================================
# EXTERNAL API KEYS
# =============================================================================
# Binance API credentials (for enhanced trading data)
# Get from: https://www.binance.com/en/my/settings/api-management
BINANCE_API_KEY=your_binance_api_key_here
BINANCE_SECRET_KEY=your_binance_secret_key_here

# CoinGecko API key (for price data and market information)
# Get from: https://www.coingecko.com/en/api/pricing
COINGECKO_API_KEY=your_coingecko_api_key_here

# Snowtrace API key (for contract verification)
# Get from: https://snowtrace.io/apis
SNOWTRACE_API_KEY=your_snowtrace_api_key_here

# OpenAI API key (for AI model integration - optional)
# Get from: https://platform.openai.com/api-keys
OPENAI_API_KEY=your_openai_api_key_here

# TradingView API key (for technical analysis - optional)
# Get from: https://www.tradingview.com/rest-api-spec/
TRADINGVIEW_API_KEY=your_tradingview_api_key_here

# =============================================================================
# DATABASE & CACHING CONFIGURATION
# =============================================================================
# Database URL (SQLite for development, PostgreSQL for production)
DATABASE_URL=sqlite:./data/trading.db
DATABASE_POOL_SIZE=10

# Redis configuration for caching and session management
REDIS_URL=redis://localhost:6379
REDIS_PASSWORD=
REDIS_DB=0
CACHE_TTL=3600
CACHE_ENABLED=true

# =============================================================================
# LOGGING & MONITORING
# =============================================================================
# Logging configuration
LOG_LEVEL=info
LOG_DIR=./logs

# Sentry DSN for error tracking (optional)
SENTRY_DSN=your_sentry_dsn_here

# Monitoring and metrics
METRICS_PORT=9090
PROMETHEUS_ENABLED=false
HEALTH_CHECK_INTERVAL=30000

# =============================================================================
# AI MODEL CONFIGURATION
# =============================================================================
# Model versioning strategy: 'ab_test', 'blue_green', 'canary'
MODEL_VERSION_STRATEGY=ab_test
AB_TEST_TRAFFIC_SPLIT=50
MODEL_PERFORMANCE_THRESHOLD=0.85
MEMORY_LIMIT=2048
GC_INTERVAL=300000

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# API rate limiting (requests per minute)
API_RATE_LIMIT=100

# Admin API key for administrative operations
ADMIN_API_KEY=your_admin_api_key_here

# Encryption key for API key encryption (auto-generated if not provided)
ENCRYPTION_KEY=

# JWT secret for authentication (auto-generated if not provided)
JWT_SECRET=

# =============================================================================
# OPTIMIZATION & PERFORMANCE
# =============================================================================
# Enable compression for responses
COMPRESSION_ENABLED=true

# CORS origins for frontend-backend communication
CORS_ORIGINS=http://localhost:8080,http://127.0.0.1:8080

# =============================================================================
# DEVELOPMENT & TESTING
# =============================================================================
# Enable detailed logging for development
DEBUG=true

# Test wallet private key (for automated testing)
TEST_PRIVATE_KEY=your_test_wallet_private_key_here

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================
# For production deployment:
# 1. Set NODE_ENV=production
# 2. Use encrypted API keys (see server/config/environment.ts)
# 3. Configure proper CORS origins
# 4. Set up proper database (PostgreSQL recommended)
# 5. Configure Redis with authentication
# 6. Set up monitoring and logging
# 7. Use hardware wallets or secure key management
# 8. Configure SSL/TLS certificates
# 9. Set up proper backup strategies
# 10. Configure rate limiting and security headers

# =============================================================================
# ENCRYPTED API KEYS (Production Use)
# =============================================================================
# For production, use encrypted API keys instead of plain text:
# OPENAI_API_KEY_ENCRYPTED=encrypted_key_here
# COINGECKO_API_KEY_ENCRYPTED=encrypted_key_here
# TRADINGVIEW_API_KEY_ENCRYPTED=encrypted_key_here
# BINANCE_API_KEY_ENCRYPTED=encrypted_key_here
# BINANCE_SECRET_KEY_ENCRYPTED=encrypted_key_here

# =============================================================================
# NETWORK-SPECIFIC CONFIGURATIONS
# =============================================================================
# Fuji Testnet Configuration
# - Use FUJI_RPC_URL for development
# - Deploy contracts to Fuji first
# - Test all functionality before mainnet

# Avalanche Mainnet Configuration  
# - Use AVALANCHE_RPC_URL for production
# - Ensure sufficient AVAX for gas fees
# - Verify contracts on Snowtrace
# - Monitor transactions carefully
